package org.oztrack.controller;

import java.util.Calendar;
import java.util.UUID;

import javax.servlet.http.HttpServletRequest;

import org.apache.commons.lang3.StringUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.commons.mail.EmailException;
import org.apache.commons.mail.SimpleEmail;
import org.oztrack.app.OzTrackApplication;
import org.oztrack.data.access.UserDao;
import org.oztrack.data.model.User;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

@Controller
public class ResetPasswordRequestController {
    protected final Log logger = LogFactory.getLog(getClass());

    @Autowired
    private UserDao userDao;

    @RequestMapping(value="/reset-password", method=RequestMethod.GET)
    public String getView(
        Model model
    ) {
        return "reset-password-request";
    }

    @RequestMapping(value="/reset-password", method=RequestMethod.POST)
    public String processPost(
        HttpServletRequest request,
        Model model,
        @RequestParam(value="email", required=false) String email
    ) {
        if (StringUtils.isBlank(email)) {
            model.addAttribute("errorMessage", "No email address was entered.");
            return "reset-password-request";
        }
        User user = userDao.getByEmail(email);
        if (user == null) {
            model.addAttribute("errorMessage", "The email address " + email + " is not associated with any account.");
            return "reset-password-request";
        }
        try {
            sendResetPasswordEmail(request.getRequestURL().toString(), user);
        }
        catch (EmailException e) {
            logger.error("Error sending password reset email", e);
            model.addAttribute("errorMessage", "Error sending password reset email: " + e.getMessage());
            return "reset-password-request";
        }
        model.addAttribute("successMessage", "A password reset link has been sent to " + email);
        return "reset-password-request";
    }

    private void sendResetPasswordEmail(String url, User user) throws EmailException {
        String passwordResetToken = UUID.randomUUID().toString();
        Calendar passwordResetExpiresAtCalendar = Calendar.getInstance();
        Integer passwordResetExpiryDays = OzTrackApplication.getApplicationContext().getPasswordResetExpiryDays();
        passwordResetExpiresAtCalendar.add(Calendar.DAY_OF_MONTH, passwordResetExpiryDays);
        user.setPasswordResetToken(passwordResetToken);
        user.setPasswordResetExpiresAt(passwordResetExpiresAtCalendar.getTime());

        SimpleEmail email = new SimpleEmail();
        email.setHostName(OzTrackApplication.getApplicationContext().getMailServerHostName());
        email.setSmtpPort(OzTrackApplication.getApplicationContext().getMailServerPort());
        email.addTo(user.getEmail(), user.getFullName());
        email.setFrom(
            OzTrackApplication.getApplicationContext().getMailFromEmail(),
            OzTrackApplication.getApplicationContext().getMailFromName()
        );
        email.setSubject("OzTrack password reset");
        email.setMsg(
            "Dear " + user.getFirstName() + ",\n" +
            "\n" +
            "This message has been generated by OzTrack in response to a password reset\n" +
            "request. If you did not submit this request, you can safely ignore this\n" +
            "message.\n" +
            "\n" +
            "Click on the following link to reset your password:\n" +
            "\n" +
            url + "/" + user.getPasswordResetToken() + "\n" +
            "\n" +
            "Note: for security reasons, this link will expire in " + passwordResetExpiryDays + " days."
        );
        email.send();

        userDao.update(user);
    }
}
